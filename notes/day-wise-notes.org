* 2016-02-22
1. Env setup
   - stack install
   - cabal was a lower level build tool, but stack is better
   - mac installation via brew: http://docs.haskellstack.org/en/stable/install_and_upgrade/#mac-os-x
   - `stack install ghc-mod hlint hoogle cabal-install hasktags`
   - `stack setup`
   - add to PATH: ~/local/.bin
2. On editors and IDEs
   - haskell isn't mainstream, so there aren't IDEs out there
   - Atom is quite feature filled, Emacs is great too.
   - http://haskellformac.com/
3. Reading material and community
   - http://reddit.com/r/haskell
   - books: Learn you a Haskell - beginner friendly, Real world haskell - not beginner friendly.
   - new, and good for learning haskell from scratch: http://haskellbook.com/
   - Guide: https://github.com/bitemyapp/learnhaskell, cis194 (we're following this)
4. On Haskell
   - started in 1991, roots in academics - designed in detail and then implemented
   - Can be intimidating - you don't need to be good at math to be good at haskell
   - Compiler keeps yelling at you to get things right. So you can be stupid.
   - What differentiates haskell:
     - Strongly, Statically typed, Type inference
       - Java is also strongly and statically typed, but does not have type inference
       #+begin_src haskell
           Prelude> 1+'1'

           <interactive>:2:2:
           No instance for (Num Char) arising from a use of ‘+’
           In the expression: 1 + '1'
           In an equation for ‘it’: it = 1 + '1'

           Prelude> :t 234
           234 :: Num a => a
       #+end_src
     - Functional
       - Functions are first class
       #+begin_src haskell
        Prelude> :t (+)
        (+) :: Num a => a -> a -> a
       #+end_src
     - Immutable (by default)
       - Bindings, objects, lists, etc, everything is immutable by default
     - Lazy
       - Call by name, not value - arguments are not evaluated first
       - Think of this as a tree, with paths/nodes that don't need to
         be evaluated. The compiler goes through the tree, and you
         imagine that it builds a single line of code containing all
         the necessary things that needs to run.
       - Scala and Clojure have lazy lists and such, but evaluation
         isn't lazy like in Haskell.
       #+begin_src haskell

           Prelude> let a = 1
           Prelude> let a =3
           Prelude> :set -Wall
           Prelude> let a = 4

           <interactive>:15:5: Warning:
           This binding for ‘a’ shadows the existing binding
           defined at <interactive>:13:5

           Prelude> let addOne x = x + 1
           Prelude> addOne (1)
           2
           Prelude> :t addOne
           addOne :: Num a => a -> a
           Prelude> addOne (1 + 1)
           3
           Prelude> addOne(error "FAIL")
	 #+end_src
     - Pure
       - enforced by the compiler
       - addOne 6 is always 7. Referrential transparency. Not always in other languages.
       #+begin_src haskell
         Prelude> :t getChar
         getChar :: IO Char
        #+end_src
   - GHC is a compiler for haskell.
   - runhaskell is an interpreter for haskell.
   - ghci - REPL - backed by the ghc. 1+"1" is not a runtime exception, it is a compile exception.
5. Lists and tuples
  #+begin_src haskell
        Prelude> [1,2,3]
        [1,2,3]
        Prelude> :t [1, 2, 3]
        [1, 2, 3] :: Num t => [t]
        Prelude> :t ["a", "b"]
        ["a", "b"] :: [[Char]]
        Prelude> :t 'c'
        'c' :: Char
        Prelude> :t "c"
        "c" :: [Char]
        Prelude> [1, "asd"]

        <interactive>:17:2:
            No instance for (Num [Char]) arising from the literal ‘1’
            In the expression: 1
            In the expression: [1, "asd"]
            In an equation for ‘it’: it = [1, "asd"]
        Prelude> ['a','s','d','f']
        "asdf"


        Prelude> let x = [1.. 7]
        Prelude>
        Prelude> x
        [1,2,3,4,5,6,7]
        Prelude> let x = [1.. ]
        Prelude>
        Prelude> x
        [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,....

        Prelude> (1, 2.0, "sadf")
        (1,2.0,"sadf")
        Prelude> :t (1, 2.0, "sadf")
        (1, 2.0, "sadf") :: (Fractional t1, Num t) => (t, t1, [Char])
        Prelude> :t (1, "sadf")
        (1, "sadf") :: Num t => (t, [Char])
  #+end_src
6. Hoogle
7. Homework
8. write a rot13 cipher
* 2016-02-23
